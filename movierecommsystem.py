# -*- coding: utf-8 -*-
"""MovieRecommSystem

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nc0vJ3MNc2b6KBUMd8rz3RNfwGlRff7E
"""

from google.colab import files
files.upload()

import warnings

warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

"""# ***READING AND INSPECTION***"""

movie=pd.read_csv('movie_dataset(1).csv')

movie.head(3)

print(movie.shape)
print(type(movie.info()))

"""# ***CLEANING THE DATA***"""

movie.isnull().sum(axis=0)

movie.isnull().sum(axis=1)

#code for column-wise null percentages 
round((movie.isnull().sum()/len(movie.index))*100,2)

movie=movie.drop('color', axis=1)
movie=movie.drop('director_facebook_likes', axis=1)
movie=movie.drop('actor_1_facebook_likes', axis=1)
movie=movie.drop('actor_2_facebook_likes', axis=1)
movie=movie.drop('actor_3_facebook_likes', axis=1)
movie=movie.drop('actor_2_name', axis=1)
movie=movie.drop('cast_total_facebook_likes', axis=1)
movie=movie.drop('actor_3_name', axis=1)
movie=movie.drop('duration', axis=1)
movie=movie.drop('facenumber_in_poster', axis=1)
movie=movie.drop('content_rating', axis=1)
movie=movie.drop('country', axis=1)
movie=movie.drop('movie_imdb_link', axis=1)
movie=movie.drop('aspect_ratio', axis=1)
movie=movie.drop('plot_keywords', axis=1)
round(100*(movie.isnull().sum()/len(movie.index)),2)

movie = movie[~np.isnan(movie['gross'])]
movie = movie[~np.isnan(movie['budget'])]
round(100*(movie.isnull().sum()/len(movie.index)),2)

movie = movie[movie.isnull().sum(axis=1) <= 5]
round(100*(movie.isnull().sum()/len(movie.index)),2)

movie.loc[pd.isnull(movie['language']), ['language']] = 'English'
round(100*(movie.isnull().sum()/len(movie.index)), 2)

print(movie.index)
round(100*(len(movie.index)/5043),2)

"""# *DATA ANALYSIS*

## **The unit of the *budget* and *gross* columns is coverted from dollars to million dollars.**
"""

movie[['gross','budget']].apply(lambda x:x/1000000)

"""##**Movies with Highest Profit**"""

movie['profit']=movie['gross'] - movie['budget']
movie

movie.sort_values(by='profit',ascending=True)

top10=movie.sort_values(by=['profit'],ascending=False).head(10) 
top10

movie.drop_duplicates()

top10=movie.sort_values(by=['profit'],ascending=False).head(10)
top10

"""### ***Avatar by James Cameron has highest profit ***

## **Analysis of combo of Genres**
"""

first=movie['genres'].apply(lambda x: pd.Series(x.split('|')))
movie['genre_1']=first[0]
movie['genre_2']=first[1]
movie.loc[pd.isnull(movie['genre_2']), ['genre_2']] = movie['genre_1']
print(movie.genre_1)
print(movie.genre_2)

movies_by_segment =movie.groupby(['genre_1','genre_2'])

movies_by_segment.head()

PopGenre =movies_by_segment['gross'].mean().sort_values(ascending=False).head

PopGenre

"""###***Family + Sci-Fi is the most popular combo of genres.***

##**Finding the critic favorite and audience favourite actor between Morgan Freeman,Shah Rukh Khan and Leonardo Di Caprio:**
"""

Morgan_Freeman=movie.loc[(movie.actor_1_name=='Morgan Freeman'),:].head(3891)

Morgan_Freeman

Leo_Caprio=movie.loc[(movie.actor_1_name=='Leonardo DiCaprio'),:].head(3891) 
Leo_Caprio

Shah_Rukh_Khan=movie.loc[(movie.actor_1_name=='Shah Rukh Khan'),:].head(3891) 
Shah_Rukh_Khan

Combined=Morgan_Freeman.append(Leo_Caprio).append(Shah_Rukh_Khan)
Combined

actor_name=Combined.groupby('actor_1_name')  
actor_name.head()

critic_reviews=actor_name['num_critic_for_reviews'].mean().sort_values(ascending=False).head(49)
print(critic_reviews)
audience_reviews=actor_name['num_user_for_reviews'].mean().sort_values(ascending=False).head(49)
print(audience_reviews)

"""### ***Leonardo tops in the given list***"""



import matplotlib as plt
import seaborn as sns

"""##**Average Rating of each Movie**
Group the dataset by movie_title and imdb_score
"""

movie.groupby('movie_title')['imdb_score'].mean().sort_values(ascending=False).head()

movie.groupby('movie_title')['num_user_for_reviews'].mean().sort_values(ascending=False).head()

imdb_mean_count = pd.DataFrame(movie.groupby('movie_title')['imdb_score'].mean())

imdb_mean_count['imdb_count_users'] = pd.DataFrame(movie.groupby('movie_title')['num_user_for_reviews'].mean())

imdb_mean_count

imdb_mean_count['imdb_score'].hist(bins=50)

imdb_mean_count['imdb_count_users'].hist(bins=50)

sns.jointplot(x='imdb_score', y='imdb_count_users', data=imdb_mean_count, alpha=0.4)

"""## **Best Director:**"""

top10director=movie.groupby('director_name')['imdb_score'].mean().sort_values(ascending=False).head(10)
top10director

"""### ***So Tony Kaye is Top Director***

# *Collaborative Filtering using Matrix Factorization*
"""

ratings_table=movie.pivot(index='userid',columns='movie_title',values='imdb_score').fillna(0)

ratings_table.head()

ratings_table.shape

X=ratings_table.values.T

X.shape

import sklearn
from sklearn.decomposition import TruncatedSVD

SVD = TruncatedSVD(n_components=12, random_state=17)
matrix = SVD.fit_transform(X)
matrix.shape

corr = np.corrcoef(matrix)
corr.shape

ratings_table_movie=ratings_table.columns

interstellar_list=list(ratings_table_movie)

interstellar_list[:10]

